
-----------------------------------------------------------------
Using Template Literals
-----------------------------------------------------------------
const cardSuit = "Spades";
const cardValue = 5;
// console.log("You turn the card over. It is a " + cardValue + " of " + cardSuit + "!"); // edit this line to use template literal syntax.
console.log("You turn the card over. it is a " + `${cardValue} of ${cardSuit} !`);

-----------------------------------------------------------------
Object and  classes
-----------------------------------------------------------------
const dragon2 = {
	color: "blue",
	maxHP: 10000,
	roar(){
		console.log("The dragon roars ferociously ");
	}
}

const dragon3 = {
    color: "black",
    maxHP: 1000,
    roar: function() {
	    console.log("The dragon roars ferociously.");
    }
};

// Add Propery to the object
dragon2.element = "fire";
// Update propery
dragon2.color = "orange";
/*console.log(dragon2);*/
// Add a methos to a dragon2
dragon2.attack = function(){ console.log("The dragon breaths a stream of white-hot flame at you!");};
console.log(dragon2.attack());

// Update method to the dragon2 Object2
dragon2.roar = function(){console.log("The dragon lets out a tremendous roar!");};
console.log(dragon2);

// Add a method to this object with a dir parameter
dragon2.swim = function(dir){
	console.log(` The dragon swims away to the ${dir}.` );
}

// calls the fucntion dragon2.swim
console.log(dragon2.swim("north"));
-----------------------------------------------------------------
This
-----------------------------------------------------------------
const dragon1 = {
    color: "red",
    roar() {
        console.log("The dragon lets out a tremendous roar!");
    }
};
// console.log(dragon1);
// show the color of the dragon in the roar() method's output
dragon1.roar = function() {
     console.log(`The ${this.color} dragon lets out a tremendous roar!`);
}
console.log(dragon1.roar());
//---------------------------------------------------
const dragon2 = {
    color: 'blue',
    roar() {
        console.log("The dragon lets out a tremendous roar!");
    }
};
// show the color with this method interpolation
dragon2.roar = function(){
	console.log(`the ${this.color} dragon lets out a tremendous roar!`);
}
console.log(dragon2.roar());

//--------------------------------------------------------------
// Default Function Parameters
//--------------------------------------------------------------
// function logSum(a, b){
// 	console.log(a + b);
// }

// console.log(logSum(2));
//output NaN (not a number)
// code before ES6 code like this
// function logSum(a, b){
// 	if ( a === undefined){ a = 0;}
// 	if ( b === undefined){ b = 0;}
// 	console.log(logSum( a + b))
// }
//--- 
// ES6 (default function parameters)
// function lonSum(a = 0, b = 0 ){
// 	console.logSum(a + b);
// }
// // The assignment operator being used in the parameter list causes a 
// // default value to be set for that parameter if no argument is passed in. 
// console.log(logSum(2, 3));
// console.log(logSum(2));
// console.log(logSum(0));

// Default function parameters are useful in class constructors
// class Cat {
// 	constructor(name, color = "gray"){
// 		this.name = name;
// 		this.color = color;
// 	}
// 	meows(){
// 		console.log(`The ${this.color} cat named ${this.name} meows.`);
// 	}
// }

// Object was created from the Cat class with just the name
// the default color of "gray" was applied
// const ray = new Cat("Ray")
// console.log(ray.meows());
// // output -- The gray cat named Ray meows.

// // object was created from the Cat class with both the name and color passed in
// // the passed-in color was used instead of the default.
// const pat = new Cat("pat", "black");
// console.log(pat.meows());
// output -- The black cat named pat meows.



-----------------------------------------------------------------
Class javascript
-----------------------------------------------------------------
class Dragon {
	// There can be only one constructor method for a class
	// constructor defines properies of objects
	constructor(color, maxHP){
		// parameter list contains variable values 
		this.color = color;
		this.maxHP = maxHP;
	}
}
// To use this class to instantiate (create a new instance of) a new object, use the new keyword:
const dragon1 = new Dragon("red", 1200);
const dragon2 = new Dragon("blue", 1000);

console.log(dragon1);
console.log(dragon2);
-----------------------------------------------------------------
add default methods to a class
-----------------------------------------------------------------
class Dragon {
	constructor(color, maxHP){
		this.color = color;
		this.maxHP = maxHP;
	}
	roar(){
		console.log(`The ${this.color} dragon lets out a tremendous roar!`);
	}
}

const dragon1 = new Dragon("red", 1200);
const dragon2 = new Dragon("blue", 1000);
console.log(dragon1.roar());
console.log(dragon2.roar());
-----------------------------------------------------------------
Class Inheritance
-----------------------------------------------------------------
class Monster {
	roar(){
		console.log("The moster lets out a tremendous roar!");
	}
}
// parent class of Monster, we can create a child class, Dragon.
class Dragon extends Monster {
	fly(){
		console.log("The dragon flaps its wings and begins to fly.");
	}
}
 //can create a new dragon from the Dragon class
 // inherited the roar() method from the Monster class
 const dragon1 = new Dragon();
// works on the console?
 console.log(dragon1.roar());
 console.log(dragon1.fly());
-----------------------------------------------------------------
Super properies
-----------------------------------------------------------------
Recreate the Monster class, this time with a (constructor) 
for the type and color, and using those properties in the roar() method as well:
class Monster {
	constructor(type, color){
		this.type = type;
		this.color = color;
		// variable always have set to true for all monsters
		this.isScary = true;
	}
	roar(){
		console.log(`The ${this.color} ${this.type} lets out a tremendous roar!`);
	}
}

// Dragon class, also using a constructor. This constructor will have three parameters: type, color, element:
class Dragon extends Monster {
	 // three parameters: type, color, element:
	constructor(type, color, element){
		// The super method,for child constructors to pass those properties that are inherited from the parent class
		super(type, color);
		// The element property of the child class, not inherited from the parent class. 
		this.element = element;	
	}
	// Then all properties are able to be used inside the fly() method. 
	fly(){
		console.log(`The ${this.color} ${this.type} ${this.element} flaps its wings and begins to fly`);
	}
	
}

// create a different child class from the parent Monster class:
class werewolf extends Monster {
	constructor(type, color){
		super(type, color);
	}
	howl(){
		console.log(`the ${this.type} howls loudly.`);
	}
}
// Then create a new werewolf object:
const werewolf1 = new werewolf("werewolf", "gray");
console.log(werewolf1.roar());
console.log(werewolf1.isScary);
console.log(werewolf1.fly());


// Creating a method from the Dragon class:
const dragon1 = new Dragon("dragon", "blue", "water");
console.log(dragon1.roar());
console.log(dragon1.isScary);
console.log(dragon1.fly());

//--------------------------------------------------------------
// Code Challenge: Objects
//--------------------------------------------------------------

// 1 - white rabbit
// const rabbit = { 
//   color: "white",
//   checkWatch() {
//     console.log(`A ${this.color} rabbit checks his watch and exclaims, 'I\'m late!'`);
//   }
// };
// rabbit.checkWatch();

// // 2 - spaceship
const spaceship = { 
  // your code here - uncomment the spaceship.launch() line below when done
  name: 'starlinks',
  launch(){
  	console.log(`You have launched the spaceship ${this.name}!`);
  }
};
spaceship.launch(); 

// 3 - shopping cart
// A shopping cart with a property "contents" initialized to an empty array
// A method addItem(item) will add an item to the contents array.
// 3 - shopping cart
 
const cart = {
	// "contents" initialized to an empty array
  contents: [],
  // method addItem(item) will add an item(parameter) to the contents array
  addItem(item) {
    this.contents.push(item);
  }
};
// your code here - uncomment the two lines below this object when done
cart.addItem("laptop");
console.log("The cart contains:", cart.contents);


// 4 - lever
// A lever with the property "stamp" set to the string "ACME"
// Write a pull() method for 
// console.log: "An anvil stamped (reference the stamp property here dynamically) drops on your head."
const lever = {
	stamp: 'ACME',
	pull(){
		console.log(`An anvil stamped ${this.stamp} drops on your head.`);	
	}
};	
lever.pull();

// 5 - Your object here
const produce = {
	produceBeggies: ["cilantro", "tommatores", 'cucumbers'],
	addProduceBeggie(item){
		this.produceBeggies.push(item);
	}
};
produce.addProduceBeggie("parley");
console.log("The  produce has: " + produce.produceBeggies.length + " items " + " which the last one is " + produce.produceBeggies[3]);

//-----------------------------------------------------------------------------------------------------------------
// Code Challenge: Class Inheritance
//-----------------------------------------------------------------------------------------------------------------
class Monster {
    constructor(type, color) {
        this.type = type;
        this.color = color;
        this.isScary = true;
    }
    roar() {
        console.log(`The ${this.color} ${this.type} lets out a tremendous roar!`);
    }
}

class Dragon extends Monster {
    constructor(type, color, element,) {
        super(type, color);
        this.element = element;
    }
    fly() {
        console.log(`The ${this.color} ${this.element} ${this.type} flaps its wings and begins to fly.`);
    };
    // new method
    attack(){
    	console.log(`The ${this.color} ${this.type}  start to blast fire and  attack.`);
    };
}

class Werewolf extends Monster {
    constructor(type, color) {
        super(type, color);
    }
    howl() {
        console.log(`The ${this.color} ${this.type} howls loudly.`);
    }
}
 class Mummy extends Monster {
 	constructor(type, color) {
 		super(type, color);	
 	}
 	chase(){
 		console.log(`The ${this.color} ${this.type} is chasing us.`);
 	}
 }
const woodDragon = new Dragon("dragon", "brown", "wood");
console.log(woodDragon.roar());
console.log(woodDragon.fly());
console.log(woodDragon.attack());

 // instantiate a new werewolf object 
const werewolf1 = new Werewolf("werewolf", "blue");
console.log(werewolf1.howl());

const mummy1 = new Mummy("Mummy", "white", "chase");
console.log(mummy1.chase());

// // sort the array alphabetically
// const produce = ["cilantro", "radishes", "beans", "parsley"];
// console.log(produce.sort());
//-----------------------------------------------------------------------
//  Is possib;e to pass a function into another fucntion as an agument
//	concept called Higher Order functions and Callbacks functions
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
//  ARRAY, MAP, FILTER, REDUCE (None mutator methods): callbacks function as arguments
//	Iteration mathods thats how you call it and they all have return values
// MAP and FILTER return a new aarray, REDUCE return a single value
//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
// The map method iterates through an array, 
// performs a given callback function on every item in the array, and returns a new array at the end. 
//-----------------------------------------------------------------------
// iterate array double each number
// variable arr1 assigned integer
const arr1 = [5, 21, 8, 100];
// variable arr2 assigned to ampty array
const arr2 = [];
// iteration if i (integer) assigned to 0 if i less than arr1 add one
for(let i = 0; i < arr1.length; i++){
	// arr1[i] * 2 is assigned to arr2[i]
	arr2[i] = arr1[i] * 2;
}
// output arr2
console.log(arr2)

// arrow function
const arr3 = [];
arr1.forEach((n, i) => {arr3[i] = n * 2;})
console.log(arr3)
//-----------------------------------------------------------------------
// MAP method
// As its argument, it took an arrow function as its callback function (n => n * 2) 
// which doubled every item in arr1 and returned the doubled value as an item in arr4.
// The map method will iterate on each element of the array on which it was called 
// (in this case, arr1) and assign the value of the n to the current item in the array, 
// perform the callback function (n * 2) then return the changed value to the new array arr4. 
//-----------------------------------------------------------------------
const arr4 = arr1.map(n => n * 2);
console.log(arr4)

//--------------------------------------------------------------------------
 // filter array method.
 //--------------------------------------------------------------------------
 // filter out items array less than 7, for loop or forEach.
 // const arr1 = [1, 3, 7, 4, 9, 15];
 // // filter method
 // // filter numbers less then 7
 // // each iteration, it will assign item to the value of the first parameter
 //  // in a callback function, then check the filtering condition inside the function body, in this case, n < 7.
 // const arr2 = arr1.filter(n => n < 7);
 // console.log(arr1);
 // console.log(arr2);

const animals = ["bear", "wolf", "dog", "monkey"];
const filteredAnimals = animals.filter(animal => animal.includes("r"));
console.log(filteredAnimals);
console.log(animals);


//--------------------------------------------------------------------------
// Unlike map and filter, however, reduce does not return an array. It returns a single value. 
//--------------------------------------------------------------------------
// array assigned to arr1
const  arr1 = [3, 4, 13, 8, 22];

const reduceValue = arr1.reduce((a, c) => a + c);
console.log(reduceValue);

//------------------------------------------------------------------------
// Arrays of Objects
//------------------------------------------------------------------------
const desserts = [
{
	id: 0,
	type: "cake",
	flavor: "chocolate",
	cost: 4.50
},
{
	id: 1,
	type: "pie",
	flavor: "pumpkin",
	cost: 3.75
}, 
{
	id: 2,
	type: "donut",
	flavor: "chocolate",
	cost: 1.50
}
];
//------------------------------------------------------------------------
// Filter
//------------------------------------------------------------------------
// Filter output error flavor is not define(dessert.flavor====)
// const chocDesserts1 = desserts.filter(dessert => flavor === "chocolate");
// console.log(chocDesserts1);
// const chocDesserts2 = desserts.filter(dessert => dessert.flavor === "chocolate");
// console.log(chocDesserts2);
//------------------------------------------------------------------------
// reduce to total up the cost of every dessert object in the array
//------------------------------------------------------------------------
// set an initial value reduce, we used a comma at the end of the callback function, initial value 0.
// an initial value is not set, then the first item of the array is used as the initial value, 
// and the second item of the array is used as the currentValue that is being iterated over. 

const totalCost = desserts.reduce((total, dessert) => total + dessert.cost, 0);
console.log(totalCost);

// const totalCostNotValue = desserts.reduce((total, dessert) => total + dessert.cost);
// console.log(totalCostNotValue);

//-------------------------------------------------------------------
// Method Chaining
// //----------------------------------------------------------------
// const states = ["whinshington", "Mine", "Montana", 'california'];
// new array filter out states begins letter Method
// const mStates = states.filter(states => states[0] === "M");
// console.log(mStates);

// // change uppercase using map method
// const mStatesUpperCased = mStates.map(state => state.toUpperCase());
// console.log(mStatesUpperCased);

// Do both with method chaining
// const mStatesUpperCased2 = states.filter(state => state[0] === 'M').map(state => state.toUpperCase()).map(state => state + "!");
// console.log(mStatesUpperCased2);

//-------------------------------------------------------------------
// Method chaining with custom object methods and adding return values
//-------------------------------------------------------------------
const bird = {
	sing(){
		console.log("the birth sings.");
	},
	fly(){
		console.log("The birth flaps its wings");
	}
}
bird.sing = function() {
    console.log("The bird sings.");
     // this keyword as the return value
    return this;
};
bird.fly = function() {
        console.log("The bird flaps its wings.");
         // this keyword as the return value
    return this;
}

console.log(bird.fly().sing());
console.log(bird.fly().fly());
console.log(bird.sing().sing().sing().fly().sing().fly());

//---------------------------------------------------
// Map Example
//---------------------------------------------------
// 1
const numbers = [1, 1, 2, 3, 5];
const numbersAddFive = numbers.map(n => n += 5);
// The below line should console.log: [6, 6, 7, 8, 10]
console.log(numbersAddFive); 

// 2 - uncomment the lines that start with "const" and "console.log"
const numbersReformatted = numbers.map(n => n += ": " );
// The below line should console.log: ["1: ", "1: ", "2: ", "3: ", "5: "] 
console.log(numbersReformatted);

// 3
// Use map method - words array,remove the "s" from the end of each word. String.slice() 
const words = ["planes", "trains", "automobiles"];
const singularWords = words.map(lastS => lastS.slice(0, -1));
// The below line should console.log: ["plane", "train", "automobile"]
console.log(singularWords);

// 4:
const firstLetters = words.map(fw => fw.slice(0, 1));
// The below line should console.log: ["p", "t", "a"]
console.log(firstLetters);

// Bonus:
const capitalizedWords =  words.map(fw => fw.charAt(0).toUpperCase() + fw.slice(1));
// The below line should console.log: ["Planes", "Trains", "Automobiles"]
console.log(capitalizedWords);

//---------------------------------------------------
// Code Challenge: Filter
//---------------------------------------------------
const pets = ["goldfish", "dog", "turtle", "tiger"]

//1 
const petsShortNames = pets.filter(pet => pet.length <= 5);
// The below line should console.log: ["dog", "tiger"]
console.log(petsShortNames);

//2 - uncomment line 9 and line 11 when you've finished challenge 1
const petsTNames = pets.filter(pet => pet.includes("t"));
// The below line should console.log: ["turtle", "tiger"] 
console.log(petsTNames);

const numbers = [3, 7, 4, 5, 10];
//3 - uncomment line 15 and line 17 
const numbersBiggerThanFour = numbers.filter(n => n > 4);
// The below line should console.log: [7, 5, 10]
console.log(numbersBiggerThanFour);

//Bonus - uncomment line 20 and line 22
const evenNumbers = numbers.filter(n => n % 2 === 0);
// The below line should console.log: [4, 10]
console.log(evenNumbers);

//---------------------------------------------------
// Code Challenge: Reduce
//---------------------------------------------------
// 1
const letters = ['h', 'e', 'l', 'l', 'o']

const greeting = letters.reduce((a, c) => a + c);
// The below line should console.log: "hello"
console.log(greeting) 

// 2 - uncomment lines 9 and 11
const numbers = [ 100, 3, 4, 1, 2];
const total = numbers.reduce((a, c) => a * c); 
// The below line should console.log: 2400
console.log(total); 

//Bonus - uncomment lines 15 and 17
const arrays = [["how", "now"], ["brown", "cow"]];
const flattenedArray = arrays.reduce((a, c) => a.concat(c));
// The below line should console.log: ["how", "now", "brown", "cow"]
console.log(flattenedArray);



//---------------------------------------------------
// extract the object with the name property matching "Hazel". 
//---------------------------------------------------
const myPets = [    {
        id: 0,
        type: "iguana",
        name: "Iggy"
    },
    {   id: 1,
        type: "cricket",
        name: "Jiminy"
    },
    {
        id: 2,
        type: "rabbit",
        name: "Hazel"
    }
];
// The return value should be the single object only
console.log(myPets.filter(pet => pet.id === 2)[0]);

/--------------------------------------------------------
//  Assignment week 1
/--------------------------------------------------------
// // Task1
// class Student {
// 	constructor(name, email, community) {
// 		this.name = name;
// 		this.email = email;
// 		this.community = community;
// 	}
// }

// class Bootcamp extends Student{
// 	constructor(name, level, student = []) {
// 		 	super();
// 			this.name = name;
// 			this.level = level;
// 			this.student = student;
// 		}
// 		// Task 2
// 	registerStudent(student) {
// 		if (this.student.filter(student => student.email === student.email).length) {
// 			console.log(`This ${student.email} is already registered`);
// 		} else {
// 			console.log(` Registering ${students.email} to the bootcamp Web Dev Fundamentals.`);
// 			this.student.push(student);
// 		}
// 		return this.student;
// 	}
// }

// // create an Ojbects from the bootcamp class
// const webDevFundamentals = new Bootcamp("web development fundametals", "Beginners");
// // type the name of the Object just created in the console
// // webDevFundamentals
// // create an other Object from bootcamp class
// const fullstack = new Bootcamp("full stack web and mobile development", "Advenced");

// // created an object using the Student class
// const Neo = new Student("Neo", "neo@gmail.com", "Seattle");
// const Lily = new Student("Lily", "lily@gmail.com", "L.A");
// const Dave = new Student("Dave", "dave@gmail.com", "N.Y");

// // Use the registerStudent() method
// webDevFundamentals.registerStudent(Neo);

// -------------------------------------------notes quizz week 3 ----------------------------------
A functional (or function) component can only be created using the function keyword. 

Select one:
True 
False
Feedback
Incorrect. Functional components may also be created using the arrow function syntax, which does not use the function keyword. 

The correct answer is 'False'.

Question 2
Correct
Mark 1.00 out of 1.00
Not flaggedFlag question
Question text
When the unary plus operator + is placed in front of a string, and that string is only operand, for example, like this:

+"3"
It will:

Select one:

a.
Double the string.


b.
Add one to the number inside it.

c.
Turn the string into a number, if it can be converted to a number, or convert it to the special value NaN if it cannot be converted to a number.


d.
Turn the string into a number, if it can be converted to a number, or convert it to Boolean false if it cannot be converted to a number.

Feedback
Your answer is correct.
The correct answer is: Turn the string into a number, if it can be converted to a number, or convert it to the special value NaN if it cannot be converted to a number.

Question 3
Partially correct
Mark 1.00 out of 3.00
Not flaggedFlag question
Question text
Which of these following examples would work as a return from a functional component?

Select one or more:

a.
function Example(props) {
    return (
        <p>{this.props.name}</p>
    );
}

b.
const Example = ({name}) => {
    return (
        <p>{name}</p>
    );
};
Correct. Assuming that name is a valid property of props, the object destructuring syntax makes the variable name available to be used within this component.

c.
function Example() {
    return <div />;
}

d.
function Example() {
    return (
        <div>
            <p>Hello World</p>
        </div>
    );
}

e.
const Example = () => {
    return (
        <span>{props.name}</span>
    );
};

f.
function Example() {
    return (
        <div>Hello</div>
        <div>World</div>
    );
}
Feedback
Your answer is partially correct.
You have correctly selected 1.
The correct answers are:
function Example() {
    return <div />;
}
,
function Example() {
    return (
        <div>
            <p>Hello World</p>
        </div>
    );
}
,
const Example = ({name}) => {
    return (
        <p>{name}</p>
    );
};
Question 4
Incorrect
Mark 0.00 out of 1.00
Not flaggedFlag question
Question text
When do you use the render attribute instead of component in a react-router <Route> component?

Select one:

a.
Whenever you are using an exact path for the <Route>.


b.
When you need to pass props to the component being routed to.


c.
When you are routing to a class component only.


d.
When you need to pass the react-router match.params object. 

Incorrect. The match.params object is automatically passed by <Route> and does not need the render attribute to do so. 
Feedback
Your answer is incorrect.
The correct answer is: When you need to pass props to the component being routed to.
Question 5
Incorrect
Mark 0.00 out of 1.00
Not flaggedFlag question
Question text
Presentational components do not ever contain any local state information. 

Select one:
True 
False
Feedback
Incorrect. Presentational containers can contain local state information related to the UI, such as if a modal is hidden or visible. 

The correct answer is 'False'.
////--------------------------------------------------------------------
quizz week 4
Match the utilities from Redux and React-Redux to their purpose.

mapStateToProps()

Answer 1
Selects the part of the state that a component needs from the Redux store and pass it to the component as props.
 
createStore()

Answer 2
Create the Redux store as the repository for application state.
 
<Provider>

Answer 3
Makes the Redux store available to nested components that are wrapped in the connect() function.
 
connect()

Answer 4
Subscribe components to the Redux store.
 
Feedback
Your answer is correct.
The correct answer is: mapStateToProps() → Selects the part of the state that a component needs from the Redux store and pass it to the component as props., createStore() → Create the Redux store as the repository for application state., <Provider> → Makes the Redux store available to nested components that are wrapped in the connect() function., connect() → Subscribe components to the Redux store.
Question 2
Incorrect
Mark 0.00 out of 1.00
Not flaggedFlag question
Question text
Given the following code:

const today = "Friday";
const matinee = true;
What is the value of ticketPrice after this ternary operation?:

const ticketPrice = (today === "Friday") && (!matinee) ? 10 : 7;
Select one:

a.
10


b.
7


c.
NaN

Incorrect.
Feedback
Your answer is incorrect.
The correct answer is: 7
Question 3
Correct
Mark 1.00 out of 1.00
Not flaggedFlag question
Question text
When you bind a method in a class component using bind(), where in the class component should this binding occur?

Select one:

a.
in the method definition of the method to be bound


b.
in the export statement


c.
in the constructor method

Correct. The binding of class component methods using bind() should occur inside the class constructor. 

d.
in the return statement


e.
in the render method

Feedback
Your answer is correct.
The correct answer is: in the constructor method
Question 4
Partially correct
Mark 0.50 out of 1.00
Not flaggedFlag question
Question text
Which of these are NOT a principle of Redux? (More than one answer.)

Select one or more:

a.
Single source of truth.


b.
Unidirectional data flow. 

Correct. This is one of the principles of the Flow architecture, which Redux is influenced by. While it is not technically one of the core principles of Redux, Redux does have unidirectional data flow. 

c.
State is read-only.


d.
Changes are made with pure functions.

Incorrect. This is one of the principles of Redux.

e.
Separation of concerns.

Feedback
Your answer is partially correct.
You have correctly selected 1.
The correct answers are: Unidirectional data flow. , Separation of concerns.
Question 5
Correct
Mark 1.00 out of 1.00
Not flaggedFlag question
Question text
What is the value of iceCream2 after the following code has executed?



const iceCream1 = {
    flavor: "mint chocolate",
    scoops: 2
};

const iceCream2 = {...iceCream1, flavor: "pistachio"};
Select one:

a.
{{iceCream1}, flavor: "pistachio"}


b.
{flavor: "pistachio"}


c.
{flavor: "pistachio", scoops: 2}

Correct! The flavor property would have been updated. 

d.
{flavor: "mint chocolate", scoops: 2}

Feedback
Your answer is correct.
The correct answer is: {flavor: "pistachio", scoops: 2}